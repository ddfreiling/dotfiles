#!/usr/bin/env bash

# Override default cd command to list files in new directory
function cd() {
  builtin cd "$@" && l
}

# Funky ls with all the bells and whistles
function lsf() {
  ls -AFoqvh --color --group-directories-first | tail -n +2 && find -maxdepth 1 -type f -printf '%s\n' | awk '{total+=$1} END {print "Total: " total" bytes"}'
}

# Create a new directory and enter it
function mkd() {
  mkdir -p "$@" && cd "$_"
}

function findin() {
  find . -name "$1" -maxdepth 10 -print0 | xargs -0 grep -F "$2"
}

# Change working directory to the top-most Finder window location
function cdf() { # short for `cdfinder`
  cd "$(osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)')"
}

function portkill() {
  lsof -t -i tcp:$1 | xargs kill
}

# Create a .tar.gz archive, using `zopfli`, `pigz` or `gzip` for compression
function targz() {
  local tmpFile="${@%/}.tar"
  tar -cvf "${tmpFile}" --exclude=".DS_Store" "${@}" || return 1

  size=$(
    stat -f"%z" "${tmpFile}" 2>/dev/null # macOS `stat`
    stat -c"%s" "${tmpFile}" 2>/dev/null # GNU `stat`
  )

  local cmd=""
  if ((size < 52428800)) && hash zopfli 2>/dev/null; then
    # the .tar file is smaller than 50 MB and Zopfli is available; use it
    cmd="zopfli"
  else
    if hash pigz 2>/dev/null; then
      cmd="pigz"
    else
      cmd="gzip"
    fi
  fi

  echo "Compressing .tar ($((size / 1000)) kB) using \`${cmd}\`…"
  "${cmd}" -v "${tmpFile}" || return 1
  [ -f "${tmpFile}" ] && rm "${tmpFile}"

  zippedSize=$(
    stat -f"%z" "${tmpFile}.gz" 2>/dev/null # macOS `stat`
    stat -c"%s" "${tmpFile}.gz" 2>/dev/null # GNU `stat`
  )

  echo "${tmpFile}.gz ($((zippedSize / 1000)) kB) created successfully."
}

# Determine size of a file or total size of a directory
function fs() {
  if du -b /dev/null >/dev/null 2>&1; then
    local arg=-sbh
  else
    local arg=-sh
  fi
  if [[ -n "$@" ]]; then
    du $arg -- "$@"
  else
    du $arg .[^.]* ./*
  fi
}

# Create a data URL from a file
function dataurl() {
  local mimeType=$(file -b --mime-type "$1")
  if [[ $mimeType == text/* ]]; then
    mimeType="${mimeType};charset=utf-8"
  fi
  echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')"
}

# Start an HTTP server from a directory, optionally specifying the port
function server() {
  local port="${1:-8000}"
  sleep 1 && open "http://localhost:${port}/" &
  # Set the default Content-Type to `text/plain` instead of `application/octet-stream`
  # And serve everything as UTF-8 (although not technically correct, this doesn’t break anything for binary files)
  python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port"
}

# Compare original and gzipped file size
function gz() {
  local origsize=$(wc -c <"$1")
  local gzipsize=$(gzip -c "$1" | wc -c)
  local ratio=$(echo "$gzipsize * 100 / $origsize" | bc -l)
  printf "orig: %d bytes\n" "$origsize"
  printf "gzip: %d bytes (%2.2f%%)\n" "$gzipsize" "$ratio"
}

# Syntax-highlight JSON strings or files
# Usage: `json '{"foo":42}'` or `echo '{"foo":42}' | json`
function json() {
  if [ -t 0 ]; then # argument
    python -mjson.tool <<<"$*" | pygmentize -l javascript
  else # pipe
    python -mjson.tool | pygmentize -l javascript
  fi
}

# Run `dig` and display the most useful info
function digga() {
  dig +nocmd "$1" any +multiline +noall +answer
}

# UTF-8-encode a string of Unicode symbols
function escape() {
  printf "\\\x%s" $(printf "$@" | xxd -p -c1 -u)
  # print a newline unless we’re piping the output to another program
  if [ -t 1 ]; then
    echo "" # newline
  fi
}

# Show all the names (CNs and SANs) listed in the SSL certificate
# for a given domain
function getcertnames() {
  if [ -z "${1}" ]; then
    echo "ERROR: No domain specified."
    return 1
  fi

  local domain="${1}"
  echo "Testing ${domain}…"
  echo "" # newline

  local tmp=$(echo -e "GET / HTTP/1.0\nEOT" |
    openssl s_client -connect "${domain}:443" -servername "${domain}" 2>&1)

  if [[ "${tmp}" = *"-----BEGIN CERTIFICATE-----"* ]]; then
    local certText=$(echo "${tmp}" |
      openssl x509 -text -certopt "no_aux, no_header, no_issuer, no_pubkey, \
      no_serial, no_sigdump, no_signame, no_validity, no_version")
    echo "Common Name:"
    echo "" # newline
    echo "${certText}" | grep "Subject:" | sed -e "s/^.*CN=//" | sed -e "s/\/emailAddress=.*//"
    echo "" # newline
    echo "Subject Alternative Name(s):"
    echo "" # newline
    echo "${certText}" | grep -A 1 "Subject Alternative Name:" |
      sed -e "2s/DNS://g" -e "s/ //g" | tr "," "\n" | tail -n +2
    return 0
  else
    echo "ERROR: Certificate not found."
    return 1
  fi
}

function getcertexpiry() {
  if [ -z "${1}" ]; then
    echo "ERROR: No domain specified."
    return 1
  fi
  local domain="${1}"
  if [ -z "${2}" ]; then
    local serveraddr="${domain}"
  else
    local serveraddr="${2}"
  fi
  echo "Checking cert expiry for $domain at address $serveraddr..."
  local result="$(echo | openssl s_client -showcerts -servername $domain -connect $serveraddr:443 2>/dev/null | openssl x509 -inform pem -noout -enddate)"
  echo "$result"
  return 0
}

function getcertvalid() {
  if [ -z "${1}" ]; then
    echo "ERROR: No domain specified."
    return 1
  fi
  local domain="${1}"
  if [ -z "${2}" ]; then
    local serveraddr="${domain}"
  else
    local serveraddr="${2}"
  fi
  echo "Checking cert expiry for $domain at address $serveraddr..."
  local result="$(echo | openssl s_client -showcerts -servername $domain -connect $serveraddr:443 -verify 0 2>&1 | egrep "Verify return|subject=/serial")"
  echo "$result"
  return 0
}

# `c` with no arguments opens the current directory in VSCode, otherwise
# opens the given location
function c() {
  if [ $# -eq 0 ]; then
    code .
  else
    code "$@"
  fi
}

# `o` with no arguments opens the current directory, otherwise opens the given
# location
function o() {
  if [ $# -eq 0 ]; then
    open .
  else
    open "$@"
  fi
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
function tre() {
  tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX
}

function htmlvalid() {
  DATA=$(curl -k $@) && html-validator --data=$DATA --verbose
}

function portuse() {
  lsof -i -n -P | grep TCP
}

# Nota stuff
function ndrevblanket() {
  open 'smb://prod.sitad.dk/dfs/CU2523/N-DREV/Diverse-Information/Personale/Blanketter'
}

function ndrevferie() {
  open 'smb://prod.sitad.dk/dfs/CU2523/N-DREV/Udveksling/Ferieregnskab og omsorgsdage'
}

function shutdownreason() {
  echo "grep -iv ': starting\|kernel: .*: Power Button\|watching system buttons\|Stopped Cleaning Up\|Started Crash recovery kernel' \
   /var/log/messages /var/log/syslog /var/log/apcupsd* \
   | grep -iw 'recover[a-z]*\|power[a-z]*\|shut[a-z ]*down\|rsyslogd\|ups'"
}

function kexec() {
  kubectl exec --stdin --tty $@ -- /bin/bash
}

function kns() {
  echo "Set kubectl context default namespace: ${1:-[none]}"
  kubectl config set-context --current --namespace=$1
}

function kfixrancherlogs() {
  eval "$(kubectl get preferences.management.cattle.io -A --field-selector metadata.name=logs-range -o jsonpath='{range .items[*]}{"kubectl -n "}{.metadata.namespace}{" delete preferences.management.cattle.io logs-range;"}{end}')"
}

function kron-suspend() {
  all_args=("$@")
  rest_args=("${all_args[@]:2}")
  kubectl patch cronjobs $1 -p "{\"spec\" : {\"suspend\" : $2 }}" $rest_args
}

function krun() {
  if [ "$#" -eq 0 ]; then
    echo "How to use: krun <Image> (..args)"
    return
  fi
  all_args=("$@")
  rest_args=("${all_args[@]:1}")
  kubectl run -i -t krun-tmp --restart=Never --rm --image=$1 $rest_args
}

function kdeploy() {
  if [ "$#" -eq 0 ]; then
    echo "How-to: kdeploy <Image> <?Name=image> <?Namespace=default>"
    return
  fi
  template=""
  image=$1
  name="${2:-$image}"
  namespace="${3:-default}"
  set +a
  yaml=$(eval "cat <<EOF
$(<~"/.k8s-templates/deployment.yaml")
  ")
  echo $yaml | kubectl apply -f -
}

function kpvreclaim() {
  if [ "$#" -eq 0 ]; then
    echo "How-to: kpvreclaim <PVName> <ReclaimPolicy> (...args)"
    return
  fi
  all_args=("$@")
  rest_args=("${all_args[@]:2}")
  kubectl patch $1 -p "{\"spec\":{\"persistentVolumeReclaimPolicy\":\"$2\"}}" $rest_args
}

function kscale() {
  if [ "$#" -eq 0 ]; then
    echo "How-to: kscale <DeploymentName> <#-of-Replicas> (...args)"
    return
  fi
  all_args=("$@")
  rest_args=("${all_args[@]:2}")
  kubectl scale deployment $1 --replicas=$2 $rest_args
}

function kpvnuke() {
  if [ "$#" -eq 0 ]; then
    echo "How to use: kpvnuke <PVName>"
    return
  fi
  all_args=("$@")
  rest_args=("${all_args[@]:1}")
  kpvunclaim pv/$1
  kubectl patch -p "{\"metadata\":{\"finalizers\":null}}" pv/$1
  kubectl delete pv/$1
}

function kreflect() {
  if [ "$#" -eq 0 ]; then
    echo "How to use: kreflect <ResourceName> <true/false> (...args)"
    return
  fi
  all_args=("$@")
  rest_args=("${all_args[@]:2}")
  kubectl annotate --overwrite $1 reflector.v1.k8s.emberstack.com/reflection-allowed=$2 $rest_args
  kubectl annotate --overwrite $1 reflector.v1.k8s.emberstack.com/reflection-auto-enabled=$2 $rest_args
}

function ketall {
  for i in $(kubectl api-resources --verbs=list --namespaced -o name | grep -v "events.events.k8s.io" | grep -v "events" | sort | uniq); do
    echo "Resource:" $i
    kubectl -n ${1} get --ignore-not-found ${i}
  done
}

function longhorn-nuke() {
  NAMESPACE=$1
  # Delete CRD finalizers, instances and definitions
  for crd in $(kubectl get crd -o jsonpath={.items[*].metadata.name} | tr ' ' '\n' | grep longhorn.rancher.io); do
    kubectl -n ${NAMESPACE} get $crd -o yaml | sed "s/\- longhorn.rancher.io//g" | kubectl apply -f -
    kubectl -n ${NAMESPACE} delete $crd --all
    kubectl delete crd/$crd
  done
}

# HELM utilities
alias hei='helm install'
alias hug='helm upgrade'
#alias hun='helm uninstall'

function helm {
  if [[ "${@:1:1}" == "uninstall" ]]; then
    hun "${@:2}"
  else
    command helm "$@"
  fi
}
function hun {
  CUR_CONTEXT=$(kubectl config current-context | tr '[:lower:]' '[:upper:]')
  RED='\033[0;31m'
  NC='\033[0m' # No Color
  echo "This is the No-Accidental-Uninstall-From-Production-Police! please check your context!"
  echo "Current context is: $RED$CUR_CONTEXT$NC"
  read "?Are you sure you want to continue? (press y):"
  if [[ $REPLY =~ ^[Yy]$ ]]; then
    command helm uninstall "$@"
  fi
}
function docco {
  OVERRIDE="${@:1:1}"
  OVERRIDE_FILE=docker-compose.$OVERRIDE.yml
  docker compose -f docker-compose.yml -f $OVERRIDE_FILE "${@:2}"
}

function k8sdebug {
  echo "wbitt/network-multitool"
}
